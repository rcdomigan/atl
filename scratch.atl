;; (define-value def
;;   (\ (ast)
;;     (if (Seq? (ast 0))
;;       (Seq ((ast 0) 0)
;;            \
;;            (slice (ast 0) 1)
;;            (ast 1))
;;       (Seq (ast 0) (ast 1)))))

(define-macro
  (def ast)
  (list->ast
   (cons
    define-value
    (if (list? (ast 0))
      (list ((ast 0) 0)
            (list
             \
             (slice (ast 0) 1)
             (ast 1)))
      (list (ast 0) (ast 1))))))

(def (recur n)
  (if (= 0 n)
    0
    (recur (bin-sub n 1))))

(define-value simple-recur (\ (a b) (if (= 0 a) b (simple-recur (bin-sub a 1) (bin-add b 1)))))

(define-value tri-add (\ (a b c) (bin-add a (bin-add b c))))

(define-value fib (\ (n a b) (if (= n 0) a (fib (bin-sub n 1) b (bin-add a b)))))
