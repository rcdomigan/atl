/**
 * @file /home/ryan/programming/atl/test/type_deduction.cpp
 * @author Ryan Domigan <ryan_domigan@sutdents@uml.edu>
 * Created on Feb 16, 2015
 *
 * Check that the metadata and so on generated by the C++ wrappers are
 * reasonable.
 */

#include <gtest/gtest.h>

#include "../ffi.hpp"
#include "../helpers.hpp"
#include <print.hpp>

#include <iostream>
#include <vector>

using namespace atl;
using namespace std;

struct TypeBasics
    : public ::testing::Test
{
	atl::Arena store;

	TypeBasics() { init_types(); }
	make_ast::AstAllocator new_ast() { return make_ast::ast_alloc(store); }
};


namespace cxx_wrappers
{
    long foo(bool a) { return 1; }
    bool bar(long a, long b) { return true; }
}


TEST_F(TypeBasics, CxxFunctions)
{
	using namespace make_ast;

    typedef WrapStdFunction<long (bool)> wfoo;

    auto a_types = wfoo::parameter_types(store);

    ASSERT_EQ(a_types,
              mk(lift<Type>(tag<FunctionConstructor>::value),
                 lift<Type>(tag<Bool>::value),
                 lift<Type>(tag<Fixnum>::value))(new_ast()));

    typedef WrapStdFunction<bool (long, long)> wbar;
    auto b_types = wbar::parameter_types(store);

    ASSERT_EQ(b_types,
              mk(lift<Type>(tag<FunctionConstructor>::value),
                 lift<Type>(tag<Fixnum>::value),
                 lift<Type>(tag<Fixnum>::value),
                 lift<Type>(tag<Bool>::value))
              (new_ast()));

    ASSERT_EQ(wfoo::arity(), 1);
    ASSERT_EQ(wbar::arity(), 2);
}
