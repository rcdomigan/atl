/**
 * @file /home/ryan/programming/atl/test/type_deduction.cpp
 * @author Ryan Domigan <ryan_domigan@sutdents@uml.edu>
 * Created on Feb 16, 2015
 *
 * Check that the metadata and so on generated by the C++ wrappers are
 * reasonable.
 */

#include <gtest/gtest.h>

#include "../ffi.hpp"
#include "../helpers.hpp"
#include <print.hpp>

#include <iostream>
#include <vector>

using namespace atl;
using namespace std;

struct TypeBasics
    : public ::testing::Test
{
	atl::Arena store;

	TypeBasics() { init_types(); }
	make_ast::AstAllocator new_ast() { return make_ast::ast_alloc(store); }

	// function constructor type
	Any fn() { return wrap<Type>(tag<FunctionConstructor>::value); }

	template<class T>
	Any type() { return wrap<Type>(tag<T>::value); }
};


TEST_F(TypeBasics, test_uniary_cxx_functions)
{
	using namespace make_ast;

	typedef WrapStdFunction<long (bool)> uniary;

	ASSERT_EQ(1, uniary::arity());

	auto uniary_types = uniary::parameter_types(store);

	ASSERT_EQ(tag<Ast>::value, uniary_types._tag);
	ASSERT_EQ(mk(fn(), type<Bool>(), type<Fixnum>())(new_ast())

	          , uniary_types);
}

TEST_F(TypeBasics, test_binary_cxx_functions)
{
	using namespace make_ast;

	typedef WrapStdFunction<bool (long, long)> binary;

	ASSERT_EQ(2, binary::arity());

	auto binary_types = binary::parameter_types(store);

	ASSERT_EQ(tag<Ast>::value, binary_types._tag);
	ASSERT_EQ(mk(fn(),
	             lift<Type>(tag<Fixnum>::value),
	             mk(fn(),
	                lift<Type>(tag<Fixnum>::value),
	                lift<Type>(tag<Bool>::value)))
	          (new_ast())

	          , binary_types);
}

TEST_F(TypeBasics, test_trinary_cxx_functions)
{
	using namespace make_ast;

	typedef WrapStdFunction<bool (long, bool, long)> triple;

	ASSERT_EQ(3, triple::arity());

	auto triple_types = triple::parameter_types(store);

	ASSERT_EQ(tag<Ast>::value, triple_types._tag);

	ASSERT_EQ(mk(fn(),
	             lift<Type>(tag<Fixnum>::value),
	             mk(fn(),
	                lift<Type>(tag<Bool>::value),
	                mk(fn(),
	                   lift<Type>(tag<Fixnum>::value),
	                   lift<Type>(tag<Bool>::value))))
	          (new_ast())

	          , triple_types);

}
